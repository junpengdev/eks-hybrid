AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::LanguageExtensions'
Description: CloudFormation template to create resources needed to run E2E tests

Parameters:
  ClusterName:
    Type: String
    Description: Name of the EKS Hybrid Cluster

  ClusterRegion:
    Type: String
    Description: Region of the EKS Hybrid Cluster

  ClusterVPCCidr:
    Type: String
    Description: EKS Hybrid Cluster VPC CIDR block
  
  ClusterPublicSubnetCidr:
    Type: String
    Description: EKS Hybrid Cluster public subnet VPC CIDR block

  ClusterPrivateSubnetCidr:
    Type: String
    Description: EKS Hybrid Cluster private subnet VPC CIDR block
  
  HybridNodeVPCCidr:
    Type: String
    Description: EC2 Hybrid Nodes VPC CIDR block
  
  HybridNodePodCidr:
    Type: String
    Description: EKS Hybrid Nodes Pod CIDR block

  HybridNodePublicSubnetCidr:
    Type: String
    Description: EKS Hybrid Nodes public subnet VPC CIDR block

  AddonPortsWithDescriptions:
    Type: CommaDelimitedList
    Description: EKS addon port list

  TestClusterTagKey:
    Type: String
    Description: Tag key of all the resources

  PodIdentityS3BucketPrefix:
    Type: String
    Description: Prefix for pod identity S3 bucket

  RolePathPrefix:
    Type: String
    Description: Path prefix for the IAM roles

  LogCollectorScript:
    Type: String
    Description: The log collector script content

  CreationTime:
    Type: String
    Description: Creation time of the stack to tag the VPC

  CreationTimeTagKey:
    Type: String
    Description: Tag key for the creation time of the stack

  EKSClusterRoleSP:
    Type: String
    Description: The Service Principal for the EKS Hybrid Cluster Role

  EKSPodIdentitySP:
    Type: String
    Description: The Service Principal for the EKS Pod Identity Association Role

Resources:
  ClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: !Ref EKSClusterRoleSP
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      Tags:
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName
      Path: !Ref RolePathPrefix
  
  ClusterVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref ClusterVPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-cluster-vpc
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName
        - Key: !Ref CreationTimeTagKey
          Value: !Ref CreationTime

  ClusterVPCPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref ClusterPublicSubnetCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-cluster-public-subnet
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName
        - Key: !Ref CreationTimeTagKey
          Value: !Ref CreationTime
      VpcId: !Ref ClusterVPC
  
  ClusterVPCPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref ClusterPrivateSubnetCidr
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-cluster-private-subnet
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName
        - Key: !Ref CreationTimeTagKey
          Value: !Ref CreationTime
      VpcId: !Ref ClusterVPC

  ClusterPublicSubnetInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-igw
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName
        - Key: !Ref CreationTimeTagKey
          Value: !Ref CreationTime

  ClusterInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ClusterVPC
      InternetGatewayId: !Ref ClusterPublicSubnetInternetGateway

  ClusterRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ClusterVPC
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-cluster-route-table
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName
        - Key: !Ref CreationTimeTagKey
          Value: !Ref CreationTime

  ClusterRouteToInternet:
    Type: AWS::EC2::Route
    DependsOn: 
      - ClusterInternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ClusterPublicSubnetInternetGateway
      RouteTableId: !Ref ClusterRouteTable

  ClusterPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ClusterRouteTable
      SubnetId: !Ref ClusterVPCPublicSubnet

  ClusterPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ClusterVPC
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-cluster-private-route-table
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName
        - Key: !Ref CreationTimeTagKey
          Value: !Ref CreationTime

  ClusterPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ClusterPrivateRouteTable
      SubnetId: !Ref ClusterVPCPrivateSubnet

  ClusterDefaultSecurityGroupIngressFromHybridNodeVPC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ClusterVPC.DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Ref HybridNodeVPCCidr

  ClusterDefaultSecurityGroupIngressFromHybridNodePodCIDR:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ClusterVPC.DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Ref HybridNodePodCidr

  HybridNodeVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref HybridNodeVPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-hybrid-node-vpc
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName
        - Key: !Ref CreationTimeTagKey
          Value: !Ref CreationTime
  
  HybridNodeVPCPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref HybridNodePublicSubnetCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-hybrid-public-subnet
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName
        - Key: !Ref CreationTimeTagKey
          Value: !Ref CreationTime
      VpcId: !Ref HybridNodeVPC

  HybridNodePublicSubnetInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-igw
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName
        - Key: !Ref CreationTimeTagKey
          Value: !Ref CreationTime

  HybridNodeInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref HybridNodeVPC
      InternetGatewayId: !Ref HybridNodePublicSubnetInternetGateway

  HybridNodeRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref HybridNodeVPC
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-route-table
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName
        - Key: !Ref CreationTimeTagKey
          Value: !Ref CreationTime

  HybridNodeRouteToInternet:
    Type: AWS::EC2::Route
    DependsOn:
      - HybridNodeInternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref HybridNodePublicSubnetInternetGateway
      RouteTableId: !Ref HybridNodeRouteTable

  HybridNodePublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref HybridNodeRouteTable
      SubnetId: !Ref HybridNodeVPCPublicSubnet

  HybridNodeDefaultSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt HybridNodeVPC.DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250
      CidrIp: !Ref ClusterVPCCidr

  HybridNodeAllowWebhooksIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt HybridNodeVPC.DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: 9443
      ToPort: 9443
      CidrIp: !Ref ClusterVPCCidr

  # Security Group Ingress rules for addon services
  'Fn::ForEach::AddonLoop':
    - PortWithDescription
    - !Ref AddonPortsWithDescriptions
    - HybridNodeSecurityGroupIngress&{PortWithDescription}:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
          GroupId: !GetAtt HybridNodeVPC.DefaultSecurityGroup
          IpProtocol: tcp
          FromPort: 
            Fn::Select: 
              - 0
              - Fn::Split:
                  - "|"
                  - !Ref PortWithDescription
          ToPort: 
            Fn::Select: 
              - 0
              - Fn::Split:
                  - "|"
                  - !Ref PortWithDescription
          CidrIp: !Ref ClusterVPCCidr
          Description: 
            Fn::Select: 
              - 1
              - Fn::Split:
                  - "|"
                  - !Ref PortWithDescription

  ClusterToHybridTGW:
    Type: AWS::EC2::TransitGateway
    Properties:
      Description: "Transit Gateway to interconnect ClusterVPC and HybridNodeVPC"
      AutoAcceptSharedAttachments: enable
      DefaultRouteTableAssociation: disable
      DefaultRouteTablePropagation: disable
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-TGW
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName
        - Key: !Ref CreationTimeTagKey
          Value: !Ref CreationTime

  TransitGatewayRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTable
    DependsOn:
      - ClusterToHybridTGW
    Properties:
      TransitGatewayId: !Ref ClusterToHybridTGW
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-ClusterToHybridTGWRouteTable
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName

  ClusterVPCAttachment:
    Type: AWS::EC2::TransitGatewayVpcAttachment
    Properties:
      TransitGatewayId: !Ref ClusterToHybridTGW
      VpcId: !Ref ClusterVPC
      SubnetIds:
        # These 2 subnets are in different AZs so we need both
        # Adding a subnet in an AZ gives the TGW the ability to route to all subnets in that AZ
        - !Ref ClusterVPCPrivateSubnet
        - !Ref ClusterVPCPublicSubnet
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-cluster-attachment
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName

  HybridNodeVPCAttachment:
    Type: AWS::EC2::TransitGatewayVpcAttachment
    Properties:
      TransitGatewayId: !Ref ClusterToHybridTGW
      VpcId: !Ref HybridNodeVPC
      SubnetIds:
        - !Ref HybridNodeVPCPublicSubnet
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-hybrid-attachment
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName

  ClusterVPCGatewayRouteTableAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref ClusterVPCAttachment
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable

  HybridNodeVPCGatewayRouteTableAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref HybridNodeVPCAttachment
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable

  TGWRouteClusterVPC:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      DestinationCidrBlock: !Ref ClusterVPCCidr
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable
      TransitGatewayAttachmentId: !Ref ClusterVPCAttachment

  TGWRouteHybridNodeVPC:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      DestinationCidrBlock: !Ref HybridNodeVPCCidr
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable
      TransitGatewayAttachmentId: !Ref HybridNodeVPCAttachment

  TGWRouteHybridNodePodCIDR:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      DestinationCidrBlock: !Ref HybridNodePodCidr
      TransitGatewayRouteTableId: !Ref TransitGatewayRouteTable
      TransitGatewayAttachmentId: !Ref HybridNodeVPCAttachment

  ClusterRouteToHybridNode:
    Type: AWS::EC2::Route
    # This explicit dep is needed to ensure the TransitGatewayAttachment is created before the route is created
    # CFN can't infer this because the route links to the TGW instead of the attachment, so it doesn't know the attachment is a dependency
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html#gatewayattachment
    DependsOn: ClusterVPCAttachment
    Properties:
      RouteTableId: !Ref ClusterRouteTable
      DestinationCidrBlock: !Ref HybridNodeVPCCidr
      TransitGatewayId: !Ref ClusterToHybridTGW
  
  ClusterPrivateRouteToHybridNode:
    Type: AWS::EC2::Route
    # This explicit dep is needed to ensure the TransitGatewayAttachment is created before the route is created
    # CFN can't infer this because the route links to the TGW instead of the attachment, so it doesn't know the attachment is a dependency
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html#gatewayattachment
    DependsOn: ClusterVPCAttachment
    Properties:
      RouteTableId: !Ref ClusterPrivateRouteTable
      DestinationCidrBlock: !Ref HybridNodeVPCCidr
      TransitGatewayId: !Ref ClusterToHybridTGW

  ClusterRouteToHybridPods:
    Type: AWS::EC2::Route
    # This explicit dep is needed to ensure the TransitGatewayAttachment is created before the route is created
    # CFN can't infer this because the route links to the TGW instead of the attachment, so it doesn't know the attachment is a dependency
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html#gatewayattachment
    DependsOn: ClusterVPCAttachment
    Properties:
      RouteTableId: !Ref ClusterRouteTable
      DestinationCidrBlock: !Ref HybridNodePodCidr
      TransitGatewayId: !Ref ClusterToHybridTGW

  ClusterPrivateRouteToHybridPods:
    Type: AWS::EC2::Route
    # This explicit dep is needed to ensure the TransitGatewayAttachment is created before the route is created
    # CFN can't infer this because the route links to the TGW instead of the attachment, so it doesn't know the attachment is a dependency
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html#gatewayattachment
    DependsOn: ClusterVPCAttachment
    Properties:
      RouteTableId: !Ref ClusterPrivateRouteTable
      DestinationCidrBlock: !Ref HybridNodePodCidr
      TransitGatewayId: !Ref ClusterToHybridTGW

  HybridNodeRouteToCluster:
    Type: AWS::EC2::Route
    # This explicit dep is needed to ensure the TransitGatewayAttachment is created before the route is created
    # CFN can't infer this because the route links to the TGW instead of the attachment, so it doesn't know the attachment is a dependency
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html#gatewayattachment
    DependsOn: HybridNodeVPCAttachment
    Properties:
      RouteTableId: !Ref HybridNodeRouteTable
      DestinationCidrBlock: !Ref ClusterVPCCidr
      TransitGatewayId: !Ref ClusterToHybridTGW

  JumpboxInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: Allow
            Principal: 
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal: 
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName
      Path: !Ref RolePathPrefix

  JumpboxInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: 
        - !Ref JumpboxInstanceRole
      Path: !Ref RolePathPrefix

  JumpboxKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties: 
      KeyName: !Sub "${AWS::StackName}-jumpbox-key"
      Tags:
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName

  JumpboxLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - JumpboxKeyPair
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-jumpbox-template"
      LaunchTemplateData:
        ImageId: resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-arm64
        IamInstanceProfile:
          Arn: !GetAtt JumpboxInstanceProfile.Arn
        SecurityGroupIds:
          - !GetAtt HybridNodeVPC.DefaultSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: !Ref TestClusterTagKey
                Value: !Ref ClusterName
              - Key: Jumpbox
                Value: true
              - Key: Name
                Value: !Sub "${AWS::StackName}-jumpbox"
        UserData:
          Fn::Base64: !Sub |
            #cloud-config
            packages:
              - rsyslog
            write_files:
              - content: |
                  Host *
                    StrictHostKeyChecking no
                    UserKnownHostsFile=/dev/null
                path: /root/.ssh/config
              - content: |
                  #!/usr/bin/env bash

                  if ! aws ssm get-parameter --name /ec2/keypair/${JumpboxKeyPair.KeyPairId} --region ${ClusterRegion} --with-decryption --query Parameter.Value --output text > /root/.ssh/id_rsa ||
                    ! openssl rsa -in /root/.ssh/id_rsa -pubout; then
                    echo "Problem downloading private key from ssm!"
                    cat /root/.ssh/id_rsa
                    exit 1
                  fi
                  chmod 0600 /root/.ssh/id_rsa
                path: /root/download-private-key.sh
                permissions: "0755"
              - content: |
                  ${LogCollectorScript}
                path: /tmp/log-collector.sh
                permissions: "0755"
            runcmd:
              - systemctl enable rsyslog --now
              - /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --resource JumpboxFleet --region ${AWS::Region}

  JumpboxFleet:
    Type: AWS::EC2::EC2Fleet
    CreationPolicy:   
      ResourceSignal:
        Timeout: PT5M
    DeletionPolicy: Delete
    DependsOn:
      - HybridNodeVPCPublicSubnet
      - JumpboxLaunchTemplate
      - HybridNodeInternetGatewayAttachment
    Properties:
      LaunchTemplateConfigs:
        - LaunchTemplateSpecification:
            LaunchTemplateId: !Ref JumpboxLaunchTemplate
            Version: !GetAtt JumpboxLaunchTemplate.LatestVersionNumber
          Overrides:
            # use t4g.micro if available, otherwise try other instance types
            - InstanceType: t4g.micro
              SubnetId: !Ref HybridNodeVPCPublicSubnet
            - InstanceType: t4g.small
              SubnetId: !Ref HybridNodeVPCPublicSubnet
            - InstanceType: t4g.large
              SubnetId: !Ref HybridNodeVPCPublicSubnet
            - InstanceType: t4g.nano
              SubnetId: !Ref HybridNodeVPCPublicSubnet
      TargetCapacitySpecification:
        TotalTargetCapacity: 1
        DefaultTargetCapacityType: on-demand
      Type: instant
      TagSpecifications:
        - ResourceType: fleet
          Tags:
            - Key: !Ref TestClusterTagKey
              Value: !Ref ClusterName
            - Key: Name
              Value: !Sub "${AWS::StackName}-jumpbox-fleet"

  PodIdentityS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      # use a predictable prefix for PodIdentity S3 bucket while maintaining uniqueness requirement for S3 bucket name
      BucketName:
        !Sub
          - '${PodIdentityS3BucketPrefix}-${AWS::AccountId}${TrimmedRegion}${UUID}' # podid-111111111uswest26d51lki0f4111f0b84e0a85c34565b7
          - TrimmedRegion: !Join ['', !Split ['-', !Ref AWS::Region ]] # us-west-2 -> uswest2
            UUID: !Join ['', !Split ['-', !Select [2, !Split [/, !Ref AWS::StackId ]]]] # arn:aws:cloudformation:us-west-2:111111111:stack/EKSHybridCI-Arch-name/6d51lki0-0f41-11f0-b84e-0a85c34565b7 -> 6d51lki0f4111f0b84e0a85c34565b7
      Tags:
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName
        - Key: !Ref PodIdentityS3BucketPrefix
          Value: true

  PodIdentityAssociationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: !Ref EKSPodIdentitySP
            Action:
              - sts:AssumeRole
              - sts:TagSession
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSPrivateCAConnectorForKubernetesPolicy
      Policies:
        - PolicyName: pod-identity-association-role-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub arn:aws:s3:::${PodIdentityS3Bucket}
                  - !Sub arn:aws:s3:::${PodIdentityS3Bucket}/*
        - PolicyName: AllowExternalDNSUpdates
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                  - route53:ListResourceRecordSets
                  - route53:ListTagsForResources
                Resource:
                  - arn:aws:route53:::hostedzone/*
              - Effect: Allow
                Action:
                  - route53:ListHostedZones
                Resource:
                  - '*'
      Tags:
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName
      Path: !Ref RolePathPrefix

  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub "${ClusterName}.local"
      VPCs:
        - VPCId: !Ref ClusterVPC
          VPCRegion: !Ref AWS::Region
      HostedZoneConfig:
        Comment: !Sub "Private hosted zone for ${ClusterName} EKS hybrid cluster"
      HostedZoneTags:
        - Key: Name
          Value: !Sub "${ClusterName}-hosted-zone"
        - Key: !Ref TestClusterTagKey
          Value: !Ref ClusterName
        - Key: !Ref CreationTimeTagKey
          Value: !Ref CreationTime
          

Outputs:
  ClusterRole:
    Description: The name of the IAM Role for EKS Hybrid Cluster.
    Value: !GetAtt ClusterRole.Arn

  ClusterVPC:
    Description: The ID of the EKS Hybrid Cluster VPC.
    Value: !Ref ClusterVPC

  ClusterVPCPublicSubnet:
    Description: The ID of the EKS Hybrid Cluster VPC Public Subnet.
    Value: !Ref ClusterVPCPublicSubnet

  ClusterVPCPrivateSubnet:
    Description: The ID of the EKS Hybrid Cluster VPC Private Subnet.
    Value: !Ref ClusterVPCPrivateSubnet
  
  ClusterSecurityGroup:
    Description: The ID of the EKS Hybrid Cluster Security Group.
    Value: !GetAtt ClusterVPC.DefaultSecurityGroup

  PodIdentityAssociationRoleARN:
    Description: The role ARN of PodIdentityAssociationRole
    Value: !GetAtt PodIdentityAssociationRole.Arn

  PodIdentityS3BucketName:
    Description: The bucket name for pod identity S3 bucket
    Value: !Ref PodIdentityS3Bucket
